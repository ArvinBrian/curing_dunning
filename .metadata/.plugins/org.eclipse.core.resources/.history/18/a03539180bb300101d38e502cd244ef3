package com.example.curingdunning.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.curingdunning.dto.ChatResponse;
import com.example.curingdunning.entity.Bill;
import com.example.curingdunning.repository.BillRepository;
import com.example.curingdunning.repository.CustomerRepository;

@Service
//@RequiredArgsConstructor
public class ChatService {
	@Autowired
    private  CustomerRepository customerRepository;
	@Autowired
    private  BillRepository billRepository;

    public ChatResponse handleUserMessage(String message, Long customerId) {
        message = message.trim().toLowerCase();

        // Main menu
        if (message.equals("hi") || message.equals("hello")) {
            return new ChatResponse(
                "Hi! What do you need help with today?\n1Ô∏è‚É£ Current plan\n2Ô∏è‚É£ Current bills\n3Ô∏è‚É£ Upcoming or overdue bills\n4Ô∏è‚É£ Total due amount",
                true,
                false
            );
        }

        // User selections
        switch (message) {
            case "2":
                return currentPlan(customerId);
            case "1":
                return currentBills(customerId);
            case "4":
                return upcomingOrOverdue(customerId);
            case "3":
                return totalDue(customerId);
            default:
                return new ChatResponse("Sorry, I didn‚Äôt understand. Type 'hi' to start again.", false, false);
        }
    }

    public ChatResponse currentPlan(Long customerId) {
        List<Bill> plans = billRepository.findByCustomerIdAndStatusNot(customerId, "SUSPENDED");

        if (plans.isEmpty()) {
            return new ChatResponse("You have no active plans at the moment.", false, false);
        }

        StringBuilder sb = new StringBuilder("üì± Your active plans:\n");
        for (Bill bills : bills) {
            sb.append("- ").append(bills.getName())
              .append(": ‚Çπ").append(bills.getPrice())
              .append(" per ").append(bills.getDuration())
              .append("\n");
        }

        return new ChatResponse(sb.toString(), false, false);
    }


    public ChatResponse currentBills(Long customerId) {
        List<Bill> bills = billRepository.findByCustomerIdAndStatusNot(customerId, "PAID");

        if (bills.isEmpty()) {
            return new ChatResponse("You have no unpaid bills. ‚úÖ", false, false);
        }

        StringBuilder sb = new StringBuilder("Here are your current unpaid bills:\n");
        for (Bill bill : bills) {
            sb.append("- ").append(bill.getServiceName())
              .append(": ‚Çπ").append(bill.getAmount())
              .append(", Due ").append(bill.getDueDate())
              .append(", Status: ").append(bill.getStatus())
              .append("\n");
        }

        return new ChatResponse(sb.toString(), false, false);
    }


    private ChatResponse upcomingOrOverdue(Long customerId) {
        // üí¨ We‚Äôll write this one together next
        return new ChatResponse("Upcoming/Overdue logic coming soon!", false, false);
    }

    public ChatResponse totalDue(Long customerId) {
        Double total = billRepository.sumAmountByCustomerIdAndStatusNot(customerId, "PAID");

        if (total == null || total == 0) {
            return new ChatResponse("üéâ You have no outstanding payments!", false, false);
        }

        return new ChatResponse("üí∞ Your total due amount is ‚Çπ" + total, false, false);
    }

}
