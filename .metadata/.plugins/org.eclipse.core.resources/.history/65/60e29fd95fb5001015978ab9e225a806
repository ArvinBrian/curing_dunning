package com.example.curingdunning.controller;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.curingdunning.dto.LoginRequest;
import com.example.curingdunning.entity.DunningRule;
import com.example.curingdunning.repository.DunningRuleRepository;
import com.example.curingdunning.service.AdminService;

@RestController
@RequestMapping("/api/admin")
public class AdminController {

    @Autowired
    private AdminService adminService;

    // 1. Dunning Rule Management
    @PostMapping("/rules")
    public ResponseEntity<DunningRule> createRule(@Valid @RequestBody AdminDunningRuleDTO ruleDTO) {
        DunningRule rule = adminService.createRule(convertToEntity(ruleDTO));
        return ResponseEntity.ok(rule);
    }

    @PutMapping("/rules/{id}")
    public ResponseEntity<DunningRule> updateRule(@PathVariable Long id, @Valid @RequestBody AdminDunningRuleDTO ruleDTO) {
        DunningRule rule = adminService.updateRule(id, convertToEntity(ruleDTO));
        return ResponseEntity.ok(rule);
    }

    @DeleteMapping("/rules/{id}")
    public ResponseEntity<Void> deleteRule(@PathVariable Long id) {
        adminService.deleteRule(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/rules")
    public ResponseEntity<List<DunningRule>> getAllRules() {
        return ResponseEntity.ok(adminService.getAllRules());
    }

    // 2. Subscription Management
    @PutMapping("/subscriptions/{subscriptionId}")
    public ResponseEntity<String> updateSubscription(
            @PathVariable Long subscriptionId,
            @RequestBody Map<String, Object> updates) {
        adminService.updateSubscription(subscriptionId, updates);
        return ResponseEntity.ok("Subscription updated successfully");
    }

    // 3. Customer Service Status
    @PutMapping("/customers/{customerId}/services/{serviceName}/status")
    public ResponseEntity<String> updateServiceStatus(
            @PathVariable Long customerId,
            @PathVariable String serviceName,
            @RequestBody Map<String, String> statusUpdate) {
        adminService.updateServiceStatus(customerId, serviceName, statusUpdate.get("status"));
        return ResponseEntity.ok("Service status updated");
    }

    private DunningRule convertToEntity(AdminDunningRuleDTO dto) {
        DunningRule rule = new DunningRule();
        rule.setServiceName(dto.getServiceName());
        rule.setOverdueDays(dto.getOverdueDays());
        rule.setAction(dto.getAction());
        rule.setPriority(dto.getPriority());
        rule.setTimeOfDay(dto.getTimeOfDay());
        rule.setPlanType(dto.getPlanType());
        return rule;
    }
}
