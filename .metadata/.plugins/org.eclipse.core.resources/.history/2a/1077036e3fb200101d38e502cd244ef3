package com.example.curingdunning.service;

import com.example.curingdunning.dto.BillDTO;
import com.example.curingdunning.entity.Bill;
import com.example.curingdunning.entity.Customer;
import com.example.curingdunning.exception.CustomerNotFoundException;
import com.example.curingdunning.repository.BillRepository;
import com.example.curingdunning.repository.CustomerRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class BillServiceImpl implements BillService {

    @Autowired
    private BillRepository billRepo;

    @Autowired
    private CustomerRepository customerRepo;

    // Helper: Convert entity → DTO
    private BillDTO toDTO(Bill bill) {
        BillDTO dto = new BillDTO();
        dto.setBillId(bill.getBillId());
        dto.setCustomerId(bill.getCustomer().getCustomerId());
        dto.setServiceName(bill.getServiceName());
        dto.setAmount(bill.getAmount());
        dto.setStatus(bill.getStatus());
        dto.setDueDate(bill.getDueDate());
        dto.setPaidAt(bill.getPaymentDate());
        dto.setDaysOverdue(bill.getOverdueDays());
        return dto;
    }

    // ✅ Automatically mark overdue bills daily
    @Scheduled(fixedRate = 86400000) // every 24 hours
    public void autoMarkOverdueBills() {
        List<Bill> bills = billRepo.findAll();
        LocalDateTime now = LocalDateTime.now();

        for (Bill bill : bills) {
            if ("PENDING".equalsIgnoreCase(bill.getStatus()) && bill.getDueDate().isBefore(now)) {
                bill.setStatus("OVERDUE");
                long daysOverdue = java.time.Duration.between(bill.getDueDate(), now).toDays();
                bill.setOverdueDays((int) daysOverdue);
                billRepo.save(bill);
            }
        }
    }

    @Override
    public Bill createBill(Bill bill) {
        // validate customer
        if (bill.getCustomer() == null || bill.getCustomer().getCustomerId() == null) {
            throw new CustomerNotFoundException("Customer is required for bill creation");
        }
        return billRepo.save(bill);
    }

    @Override
    public Bill getBillById(Long id) {
        return billRepo.findById(id).orElse(null);
    }

    @Override
    public List<Bill> getBillsByCustomer(Long customerId) {
        return billRepo.findByCustomerCustomerId(customerId);
    }

    @Override
    public List<Bill> getAllBills() {
        return billRepo.findAll();
    }

    @Override
    public Bill markBillAsPaid(Long billId) {
        Bill bill = getBillById(billId);
        if (bill != null) {
            bill.setPaid(true);
            bill.setPaymentDate(LocalDateTime.now());
            bill.setStatus("PAID");
            return billRepo.save(bill);
        }
        return null;
    }

    // ✅ Get all current (pending) bills
    @Override
    public List<BillDTO> getCurrentBills(Long customerId) {
        if (!customerRepo.existsById(customerId)) {
            throw new CustomerNotFoundException("Customer not found: " + customerId);
        }

        List<Bill> bills = billRepo.findByCustomerCustomerIdAndStatus(customerId, "PENDING");
        return bills.stream().map(this::toDTO).collect(Collectors.toList());
    }

    // ✅ Get all past (paid) bills
    @Override
    public List<BillDTO> getPastBills(Long customerId) {
        if (!customerRepo.existsById(customerId)) {
            throw new CustomerNotFoundException("Customer not found: " + customerId);
        }

        List<Bill> bills = billRepo.findByCustomerCustomerIdAndStatus(customerId, "PAID");
        return bills.stream().map(this::toDTO).collect(Collectors.toList());
    }
}
