package com.example.curingdunning.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.curingdunning.dto.ChatResponse;
import com.example.curingdunning.entity.Bill;
import com.example.curingdunning.repository.BillRepository;
import com.example.curingdunning.repository.CustomerRepository;

@Service
//@RequiredArgsConstructor
public class ChatService {
	@Autowired
    private  CustomerRepository customerRepository;
	@Autowired
    private  BillRepository billRepository;

    public ChatResponse handleUserMessage(String message, Long customerId) {
        message = message.trim().toLowerCase();

        // Main menu
        if (message.equals("hi") || message.equals("hello")) {
            return new ChatResponse(
                "Hi! What do you need help with today?\n1Ô∏è‚É£ Current plan\n2Ô∏è‚É£ Current bills\n3Ô∏è‚É£ Upcoming or overdue bills\n4Ô∏è‚É£ Total due amount",
                true,
                false
            );
        }

        // User selections
        switch (message) {
            case "1":
                return currentPlan(customerId);
            case "2":
                return currentBills(customerId);
            case "3":
                return upcomingOrOverdue(customerId);
            case "4":
                return totalDue(customerId);
            default:
                return new ChatResponse("Sorry, I didn‚Äôt understand. Type 'hi' to start again.", false, false);
        }
    }

    private ChatResponse currentPlan(Long customerId) {
        // üîπ simplified for now, we‚Äôll improve later
        return new ChatResponse("You are on the Premium Monthly plan. Status: ACTIVE", false, false);
    }

    private ChatResponse currentBills(Long customerId) {
        List<Bill> bills = billRepository.findByCustomerCustomerId(customerId);
        if (bills.isEmpty())
            return new ChatResponse("No current bills found.", false, false);

        StringBuilder sb = new StringBuilder("Here are your current bills:\n");
        bills.forEach(b ->
            sb.append(String.format("- %s: ‚Çπ%s, Due %s, Status: %s\n",
                b.getServiceName(), b.getAmount(), b.getDueDate().toLocalDate(), b.getStatus()))
        );
        return new ChatResponse(sb.toString(), false, false);
    }

    private ChatResponse upcomingOrOverdue(Long customerId) {
        // üí¨ We‚Äôll write this one together next
        return new ChatResponse("Upcoming/Overdue logic coming soon!", false, false);
    }

    private ChatResponse totalDue(Long customerId) {
        double total = billRepository.getTotalDueForCustomer(customerId);
        return new ChatResponse("Your total due amount is ‚Çπ" + total, false, false);
    }
}
